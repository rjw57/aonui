
// DO NOT EDIT THIS FILE. GENERATED BY mkdoc.sh.
// Edit the documentation in other files and rerun mkdoc.sh to generate this one.

/*
Aonui is a tool for downloading and managing meteorological data.

Usage:

        aonui command [arguments]

The commands are:

    sync        fetch wind data from the GFS
    extract     extract binary data from a GRIB2 message into Tawhiri order
    info        print information on GRIB2 files
    inv         filter and sort GRIB2 inventories into Tawhiri order
    reorder     re-order a GRIB2 file into Tawhiri order

Use "aonui help [command]" for more information about a command.

Additional help topics:

    tawhiri     the Tawhiri data ordering

Use "aonui help [topic]" for more information about that topic.


Fetch wind data from the GFS

Usage:

        aonui sync [flags]

Sync will fetch wind data from the Global Forecast System (GFS) servers in
GRIB2 data. It will only fetch the subset of the data needed. It knows how to
fetch both the current 0.5 degree resolution data and the forthcoming 0.25
degree data.

Setting base directory

The -basedir flag specifies the directory data should be downloaded to. If
omitted, the current working directory is used.

Downloading high reolsution data

If the -highres flag is present, 0.25 degree data will be downloaded. If
omitted, the 0.5 degree data is downloaded.

Specifying the oldest run to sync

The -maxruns flag controls how far into the past sync will look for data before
stopping. The default value of 3 means examine the 3 newest runs on the server
starting with the newest. If any run is a) incomplete on the server or b)
already downloaded proceed to the next until the list of runs is exhausted.

The utility attempts to be robust in the face of flaky network connections or a
flaky server by re-trying failed downloads.

Specifing which parameters to download

By default, aonui sync will download the HGT, UGRD and VGRD parameters from the
dataset. Use the -params flag to specify an alternate set. The set of
parameters to download should be a comma-separated lists.

Specifying filename for download

Data is saved to the file gfs.YYYMMDDHH.grib2 where YYYY, MM, DD and HH are the
year, month, day and hour of the run with an appropriate number of leading
zeros.

The -prefix flag sets an additional prefix to add to the front of this name.


Extract binary data from a GRIB2 message into Tawhiri order

Usage:

        aonui extract <ingrib> <outbin>

Extract will parse a GRIB2 message in the file ingrib and write a raw binary
dump of native-endian floating point values to outbin in Tawhiri order.

See also: aonui help tawhiri


Print information on GRIB2 files

Usage:

        aonui info gribfile

Info prints information on the shape of data in a GRIB2 file to standard
output. Gribfile specifies which GRIB2 file is parsed. Output has the following
form:

	NX=720
	NY=361
	NPARAM=3
	NPRESSURE=47
	NFCSTHOUR=65
	PRESSURES=1000,975,950,925,900,875,850,... # etc
	FCSTHOURS=0,3,6,9,12,15,18,21,24,27,30,... # etc
	RUNTIME=2014102106

NX, NY, NPARAM, NPRESSURE and NFCSTHOUR give the sizes of each dimension of the
data. PRESSURES and FCSTHOURS are comma-separated integers giving the
particular pressures and forecast hours which correspondt to each point along
the respective axes. The RUNTIME is the date and time the forecast was run on
formatted as YYYYMMDDHH.

Note that this command may take some time to complete the first time it is run
on a file since collating the pressures and forecast hours requires scanning
through the entire GRIB2 message.

JSON formatted output

If the -json flag is specified, information is written to standard output in
JSON format. The output looks similar to:

	{
	  "width": 720,
	  "height": 361,
	  "parameters": [ "HGT", "UGRD", "VGRD" ],
	  "pressures": [ 875, 825, <etc> ],
	  "forecastHours": [ 0, 3, <etc> ],
	  "runTime": "2014-11-10T12:00:00Z"
	}


Filter and sort GRIB2 inventories into Tawhiri order

Usage:

        aonui inv [-nosort] [-nofilter] gribfile

Inv dumps and optionally filters and sorts a GRIB2's inventory into the order
Tawhiri expects. (See "aonui help tawhiri" for details on this ordering.)

The first time this command is run on a file it can take a long time to
generate output as wgrib2 will need to scan through the entire GRIB2 message.

Inv does not directly deal with latitudes or longitudes but will parse the
inventory from the specified GRIB2 file and output an inventory on standard
output which corresponds to the Tawhiri ordering for parameters, pressures and
forecast hours.

Inv will sort inventory items as described in "aonui help tawhiri" but this
behaviour may be disabled via the -nosort flag.

Inv will remove inventory items not used by Tawhiri. This behaviour can be
disabled via the -nofilter flag. In this case non-Tawhiri inventory
items will be sorted after Tawhiri ones.

With -nosort and -nofilter both enabled, inv should generate an inventory
identical to that produced by "wgrib2 -s".

See also: aonui help tawhiri


Re-order a GRIB2 file into Tawhiri order

Usage:

        aonui reorder ingribfile outgribfile

Reorder will take an existing GRIB2 file on disk and write out a new GRIB2 file
with the records re-ordered into the order Tawhiri expects. (See "aonui help
tawhiri" for details on this ordering.)

Input is read from ingribfile and written to outgribfile. Records not used by
Tawhiri will not be written to the output.

See also: aonui help tawhiri


The Tawhiri data ordering

The Tawhiri predictor treats the wind data as a large five-dimensional array of
floating point values in a particular order.

The data should be ordered into a C-style array with dimensions forecast hour,
pressure, parameter, latitude and longitude. "C-style" here meaning that
adjacent records in the file correspond to changes in longitude.

Longitudes are ordered West-to-East and latitudes are ordered South-to-North.
Parameters are in the order HGT, UGRD, VGRD.  Pressures are in decreasing
numerical order. (This is so that the first pressure corresponds to the lowest
geo-potential height.) Forecast hours are in increasing numerical order.


*/
package main
